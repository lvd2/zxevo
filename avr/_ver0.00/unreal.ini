
[SYSTEM.KEYS]

; pc keyboard:
;
;  ESC  F1  F2  F3  F4     F5  F6  F7  F8    F9  F10 F11 F12          PRSCR SCLOCK PAUSE
;  TIL   1   2   3   4   5   6   7   8   9   0 MINUS PLUS  BACK         INS HOME PGUP     NUMLOCK GRDIV GRMUL GRSUB
;  TAB   Q   W   E   R   T   Y   U   I   O   P   LB    RB               DEL END  PGDN        N7    N8    N9   GRADD
;  CAPS  A   S   D   F   G   H   J   K   L   COL QUOTE ENTER                                 N4    N5    N6
;  LSHIFT Z  X   C   V   B   N   M COMMA POINT SLASH RSHIFT BACKSL           UP              N1    N2    N3   ENTER
;  LCONTROL LALT              SPACE                  RALT RCONTROL     LEFT DOWN RIGHT       N0          NP

; LMB,RMB,MMB - mouse buttons
; MWU,MWD - mouse wheel up/down
; JLEFT,JRIGHT,JUP,JDOWN,JFIRE - joystick/gamepad

; mouse & joystick "keys" can't be bound to commands, only to spectrum keys

; p.s.
;      CONTROL = LCONTROL or RCONTROL
;      ALT     = LALT or RALT
;      SHIFT   = LSHIFT or RSHIFT
; numlock must be on for N0-N9 and NP

; system commands:
; command=key1 [key2 [key3 [key4]]]

; keys active in emulation mode

main.exit=ALT F4           ; why do this?
;main.exit=F10
main.lockmouse=SHIFT ESC   ; read kempston mouse in windowed mode
;;main.monitor=CONTROL F1;ESC           ; for hackers only
main.monitor=ESC
main.selectfilter=F4       ; select video filter
main.selectdriver=SHIFT F4 ; select video driver for some filters
main.fullscreen=ALT ENTER  ; toggle full-screen on/off
main.pause=PAUSE           ; pause
main.selectfix=GRMUL       ; select video parameter
main.selectsnd=ALT GRMUL   ; select soundchip parameter or palette
main.incfix=SHIFT GRADD    ; fine tuneup
main.decfix=SHIFT GRSUB    ; fine tuneup
main.incfix10=GRADD        ; tuneup
main.decfix10=GRSUB        ; tuneup
main.leds=GRDIV            ; leds on/off
main.maxspeed=NUMLOCK      ; max speed on/off
main.pokedialog=F6         ; enter poke(s)
main.starttape=F7          ; start/stop tape
main.tapebrowser=SHIFT F7  ; tape browser
main.screenshot=ALT F8     ; screenshot
main.reset=F12             ; reset to [MISC]Reset=DOS/BASIC/MENU/SYS
main.reset128=CONTROL SHIFT F12 ; reset to basic 128
main.resetsys=ALT F12      ; reset to service ROM
main.reset48=ALT SHIFT F12 ; reset to basic 48 with locked 128k memory
main.resetbasic=SHIFT F12  ; reset to basic 48 with unlocked 128k memory
main.resetdos=CONTROL F12  ; reset to TR-DOS
main.resetcache=ALT CONTROL F12    ; reset to cache
main.nmi=ALT SHIFT F11     ; NMI without ROM switching
main.nmidos=CONTROL F11    ; TR-DOS magic
main.nmicache=ALT F11      ; NMI in cache
main.help=F1               ; show keys
main.settings=ALT F1       ; emulation settings (GUI)
main.save=F2               ; save disk/snapshot
main.load=F3               ; load disk/tape/snapshot
main.savesound=F5          ; save WAV/VTX
main.qsave1=ALT F2         ; quick save to qsave1.sna
main.qsave2=CONTROL F2     ; quick save to qsave2.sna
main.qsave3=SHIFT F2       ; quick save to qsave3.sna
main.qload1=ALT F3         ; quick load from qsave1.sna
main.qload2=CONTROL F3     ; quick load from qsave2.sna
main.qload3=SHIFT F3       ; quick load from qsave3.sna
main.keystick=SCLOCK       ; toggle keystick mode
main.autofire=ALT NUMLOCK  ; toggle autofire mode
main.saveall=F9            ; quick save cmos and disks
main.xtkbd=ALT CONTROL Z   ; enable/disable ATM XT keyboard (emulation controls blocked!)
main.pastetext=ALT SHIFT INS ; copy text from clipboard to keyboard buffer
main.size1=ALT 1           ; set normal window size (in windowed mode)
main.size2=ALT 2           ; set double window size (in windowed mode)
main.sizem=ALT 3           ; maximize window (in windowed mode)
main.memsearch=ALT F6      ; search in memory for changed values (cheats, etc)

; keys in all monitor windows

mon.exit=ALT F4           ;
mon.emul=ESC              ; back to emulation
mon.bpdialog=ALT C        ; conditional breakpoints dialog
mon.gs=ALT G              ; gs status dialog
mon.pokedialog=ALT P      ; enter poke(s) F6 is already used
mon.tapebrowser=SHIFT F7  ; tape browser
mon.reset=F12             ; reset to [MISC]Reset=DOS/BASIC/MENU/SYS
mon.reset128=CONTROL SHIFT F12 ; reset to basic 128
mon.resetsys=ALT F12      ; reset to service ROM
mon.reset48=ALT SHIFT F12 ; reset to basic 48 with locked 128k memory
mon.resetbasic=SHIFT F12  ; reset to basic 48 with unlocked 128k memory
mon.resetdos=CONTROL F12  ; reset to TR-DOS
mon.resetcache=ALT CONTROL F12    ; reset to cache
mon.nmi=ALT SHIFT F11     ; NMI without ROM switching
mon.nmidos=CONTROL F11    ; TR-DOS magic
mon.nmicache=ALT F11      ; NMI in cache
mon.help=F1               ; show keys
mon.settings=ALT F1       ; emulation settings (GUI)
mon.save=F2               ; save disk/snapshot
mon.load=F3               ; load disk/tape/snapshot
mon.savesound=F5          ; save WAV/VTX
mon.qsave1=ALT F2         ; quick save to qsave1.sna
mon.qsave2=CONTROL F2     ; quick save to qsave2.sna
mon.qsave3=SHIFT F2       ; quick save to qsave3.sna
mon.qload1=ALT F3         ; quick load from qsave1.sna
mon.qload2=CONTROL F3     ; quick load from qsave2.sna
mon.qload3=SHIFT F3       ; quick load from qsave3.sna
mon.setrange=F6           ; set range of breakpoints
mon.resetrange=SHIFT F6   ; reset range of breakpoints
mon.screen=F9             ; show screen, as it present in video memory
mon.altscreen=SHIFT F9    ; show inactive screen
mon.rayscreen=ALT F9      ; show painted screen area until crt-ray (with MC, border & 2-scr effects)
mon.step=F7               ; single step
mon.stepover=F8           ; step over loops and calls
mon.exitsub=F11           ; trace until (sp)
mon.loadblock=ALT R       ; load memory block
mon.saveblock=ALT W       ; save memory block
mon.fillblock=ALT F       ; fill memory block with pattern
mon.setbank=ALT B         ; write to #7FFD
mon.sethimem=ALT M        ; write to model-specific extended memory port
mon.next=TAB              ; next window
mon.prev=SHIFT TAB        ; prev window
mon.dump=ALT D            ; toggle dump
mon.rip=ALT T             ; ripper's tool
mon.osw=ALT O             ; setup on-screen watches
mon.scrshot=ALT S         ; toggle screenshot/scrdump/watches
mon.setwatch=CONTROL U    ; set user-defined watch address
mon.switchay=ALT Y        ; switch active AY (turbo-sound)
mon.labels=CONTROL J      ; goto label
mon.memsearch=ALT F6      ; search in memory for changed values (cheats, etc)

; keys in registers window

reg.left=LEFT           ; select register
reg.right=RIGHT         ; select register
reg.up=UP               ; select register
reg.down=DOWN           ; select register
reg.edit=ENTER          ; edit current register
reg.a=CONTROL A         ; edit A
reg.f=CONTROL F         ; edit flags
reg.bc=CONTROL B        ; edit BC
reg.de=CONTROL D        ; edit DE
reg.hl=H                ; edit HL
reg.pc=P                ; edit PC
reg.sp=S                ; edit SP
reg.ix=X                ; edit IX
reg.iy=Y                ; edit IY
reg.i=I                 ; edit i
reg.r=R                 ; edit R
reg.im=M                ; edit im
reg.iff1=CONTROL 1      ; edit iff1
reg.iff2=CONTROL 2      ; edit iff2
reg.SF=ALT S            ; toggle SF
reg.ZF=ALT Z            ; toggle ZF
reg.F5=ALT 5            ; toggle F5
reg.HF=ALT H            ; toggle HF
reg.F3=ALT 3            ; toggle F3
reg.PF=ALT P            ; toggle PF/PV
reg.NF=ALT N            ; toggle NF
reg.CF=ALT C            ; toggle CF
reg.codejump=QUOTE      ; goto address in code window under cursor
reg.datajump=COL        ; goto address in data window under cursor

; keys in cpu window

cpu.findpc=HOME         ; set cursor at PC
cpu.here=F4             ; trace to cursor
cpu.findtext=ALT F7     ; find string
cpu.findcode=CONTROL F7 ; find code with mask
cpu.goto=G              ; goto address
cpu.bpx=SPACE           ; breakpoint under cursor
cpu.asm=ENTER           ; edit instruction
cpu.setpc=Z             ; set PC to cursor
cpu.up=UP               ; move cursor up
;cpu.up=MWU             ; move cursor up
cpu.down=DOWN           ; move cursor down
;cpu.down=MWD           ; move cursor down
cpu.left=LEFT           ; move cursor left
cpu.right=RIGHT         ; move cursor right
cpu.pgdn=PGDN           ; next page
cpu.pgup=PGUP           ; prev page
cpu.save1=CONTROL 1     ; save cursor position to slot 1
cpu.save2=CONTROL 2
cpu.save3=CONTROL 3
cpu.save4=CONTROL 4
cpu.save5=CONTROL 5
cpu.save6=CONTROL 6
cpu.save7=CONTROL 7
cpu.save8=CONTROL 8
cpu.rest1=1             ; save cursor position to jumpstack, load from slot 1
cpu.rest2=2
cpu.rest3=3
cpu.rest4=4
cpu.rest5=5
cpu.rest6=6
cpu.rest7=7
cpu.rest8=8
cpu.back=BACK           ; pop cursor position from jumpstack
cpu.context=QUOTE       ; push cursor position and goto instruction operand
cpu.datajump=COL        ; jump to instruction operand in data window
cpu.labels=CONTROL L    ; show labels on/off
cpu.importl=CONTROL A   ; menu for importing labels from XAS/ALASM

; keys in memory dump window

mem.left=LEFT           ; cursor left
mem.right=RIGHT         ; cursor right
mem.up=UP               ; cursor up
mem.down=DOWN           ; cursor down
mem.pgup=PGUP           ; page up
mem.pgdn=PGDN           ; page down
mem.switch=CONTROL TAB  ; move to hex/ascii
mem.stline=HOME         ; start of line
mem.endline=END         ; end of line
mem.findtext=ALT F7     ; find text in memory / disk track
mem.findcode=CONTROL F7 ; find code with mask in memory / disk track
mem.goto=CONTROL G      ; goto address
mem.mem=CONTROL M       ; select memory editor
mem.diskphys=CONTROL V  ; select disk editor (physical track)
mem.disklog=CONTROL O   ; select disk editor (logical sectors)
mem.diskgo=CONTROL T    ; select drive/track/sector in diskeditor
mem.pc=CONTROL P        ; goto PC
mem.sp=CONTROL S        ; goto SP
mem.bc=CONTROL B        ; goto BC
mem.de=CONTROL D        ; goto DE
mem.hl=CONTROL H        ; goto HL
mem.ix=CONTROL X        ; goto IX
mem.iy=CONTROL Y        ; goto IY



[ZX.KEYS.default]

Name=unreal default

;               ZX keyboard layout:
;
;  1    2    3    4    5    6    7    8    9    0
;  Q    W    E    R    T    Y    U    I    O    P
;  A    S    D    F    G    H    J    K    L   ENT
; CAP   Z    X    C    V    B    N    M   SYM  SPC

; KLEFT,KRIGHT,KUP,KDOWN,KFIRE        - kempston joystick

; format:
; PC_KEY=[ZX_KEY_SHIFT] ZX_KEY

1=1
2=2
3=3
4=4
5=5
6=6
7=7
8=8
9=9
0=0
Q=Q
W=W
E=E
R=R
T=T
Y=Y
U=U
I=I
O=O
P=P
A=A
S=S
D=D
F=F
G=G
H=H
J=J
K=K
L=L
Z=Z
X=X
C=C
V=V
B=B
N=N
M=M
TIL=CAP 1
CAPS=CAP 2
PGUP=CAP 3
PGDN=CAP 4
LEFT=CAP 5
DOWN=CAP 6
UP=CAP 7
RIGHT=CAP 8
DEL=CAP 9
BACK=CAP 0
MINUS=SYM J
PLUS=SYM K
COMMA=SYM N
POINT=SYM M
ENTER=ENT
SPACE=SPC
LB=SYM 8
RB=SYM 9
COL=SYM Z
TAB=CAP SPC             ; break
INS=SYM W
HOME=SYM Q
END=SYM E
QUOTE=SYM P
SLASH=SYM C
BACKSL=SYM CAP

LSHIFT=CAP
RSHIFT=SYM

N4=KLEFT
N6=KRIGHT
N8=KUP
N2=KDOWN
N5=KFIRE
N1=KLEFT KDOWN
N3=KRIGHT KDOWN
N7=KUP KLEFT
N9=KUP KRIGHT

MWU=CAP 7
MWD=CAP 6

JLEFT=KLEFT
JRIGHT=KRIGHT
JUP=KUP
JDOWN=KDOWN
JFIRE=KFIRE

[ZX.KEYS.XAS]

Name=XAS 7.xx (incomplete)

1=1
2=2
3=3
4=4
5=5
6=6
7=7
8=8
9=9
0=0
Q=Q
W=W
E=E
R=R
T=T
Y=Y
U=U
I=I
O=O
P=P
A=A
S=S
D=D
F=F
G=G
H=H
J=J
K=K
L=L
Z=Z
X=X
C=C
V=V
B=B
N=N
M=M
SHIFT=CAP
CONTROL=SYM

[ZX.KEYS.ACEDIT]

; layout created by Alone Coder

Name=ACEdit

1=1
2=2
3=3
4=4
5=5
6=6
7=7
8=8
9=9
0=0
Q=Q
W=W
E=E
R=R
T=T
Y=Y
U=U
I=I
O=O
P=P
A=A
S=S
D=D
F=F
G=G
H=H
J=J
K=K
L=L
Z=Z
X=X
C=C
V=V
B=B
N=N
M=M
TIL=CAP 1
CAPS=CAP 2
PGUP=CAP 3
PGDN=CAP 4
LEFT=CAP 5
DOWN=CAP 6
UP=CAP 7
RIGHT=CAP 8
DEL=CAP 9
BACK=CAP 0
MINUS=SYM J
PLUS=SYM L
COMMA=SYM N
POINT=SYM M
ENTER=ENT
SPACE=SPC
LB=SYM 8
RB=SYM 9
COL=SYM O
TAB=SYM CAP
ESC=CAP SPC
INS=SYM W
HOME=SYM Q
END=SYM E
QUOTE=SYM P
SLASH=SYM C
BACKSL=SYM Z

SHIFT=CAP
CONTROL=SYM

N4=KLEFT
N6=KRIGHT
N8=KUP
N2=KDOWN
N5=KFIRE
N1=KLEFT KDOWN
N3=KRIGHT KDOWN
N7=KUP KLEFT
N9=KUP KRIGHT
GRSUB=SYM J
GRADD=SYM K
GRMUL=SYM B
GRDIV=SYM V

[ZX.KEYS.Z80Stealth]

Name=Z80Stealth default

;               ZX keyboard layout:
;
;  1    2    3    4    5    6    7    8    9    0
;  Q    W    E    R    T    Y    U    I    O    P
;  A    S    D    F    G    H    J    K    L   ENT
; CAP   Z    X    C    V    B    N    M   SYM  SPC

; KLEFT,KRIGHT,KUP,KDOWN,KFIRE        - kempston joystick

; format:
; PC_KEY=[ZX_KEY_SHIFT] ZX_KEY

1=1
2=2
3=3
4=4
5=5
6=6
7=7
8=8
9=9
0=0
Q=Q
W=W
E=E
R=R
T=T
Y=Y
U=U
I=I
O=O
P=P
A=A
S=S
D=D
F=F
G=G
H=H
J=J
K=K
L=L
Z=Z
X=X
C=C
V=V
B=B
N=N
M=M
TIL=CAP 1
CAPS=CAP 2
PGUP=CAP 3
PGDN=CAP 4
LEFT=CAP 5
DOWN=CAP 6
UP=CAP 7
RIGHT=CAP 8
DEL=CAP 9
BACK=CAP 0
MINUS=SYM J
PLUS=SYM K
COMMA=SYM N
POINT=SYM M
ENTER=ENT
SPACE=SPC
LB=SYM 8
RB=SYM 9
COL=SYM Z
TAB=CAP SPC             ; break
INS=SYM W
HOME=SYM Q
END=SYM E
QUOTE=SYM P
SLASH=SYM C
BACKSL=SYM CAP

RALT=SYM
LSHIFT=CAP
RSHIFT=CAP
RCONTROL=CAP SYM

N4=KLEFT
N6=KRIGHT
N8=KUP
N2=KDOWN
N5=KFIRE
N1=KLEFT KDOWN
N3=KRIGHT KDOWN
N7=KUP KLEFT
N9=KUP KRIGHT

MWU=CAP 7
MWD=CAP 6

JLEFT=KLEFT
JRIGHT=KRIGHT
JUP=KUP
JDOWN=KDOWN
JFIRE=KFIRE
