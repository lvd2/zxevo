/*
+0: len of payload N (0..255)
+1: channel number (0..239, 240-255 are control channels)
+2..+N+2: payload (0..255 bytes)
+N+3..+N+4: crc16 ccitt big-endian of preceding bytes

reset sequence:
repeating  01 FF 00 F8 53
where:
01 - length of payload
FF - control channel
00 - payload of single zero byte
F853 - crc of 01FF00
*/



Протокол zxinet предназначен для связи компьютера ZX-Spectrum (в дальнейшем -
компьютер) с сетевым контроллером (в дальнейшем - контроллер), предоставляющим
прикладным программам возможность соединения с сетью по протоколам tcp и udp.

Возможности протокола:
1) суммарное число открытых сокетов: от 4 до 240 (каждый контроллер имеет свое
   ограничение)
2) TCP-соединение с внешним адресом (CONNECT)
3) прослушивание порта и установление TCP-соединения на локальном адресе (BIND)
4) контроль целостности без восстановления


 1. Связь компьютера с сетевым контроллером происходит путём двустороннего
обмена потоками байт. Предполагается, что существуют возможности для управления
этими потоками: в сторону от компьютера к контроллеру - возможность контроллеру
приостановить дальнейший приём (например, из-за переполнения буфера
контроллера), в сторону от контроллера к компьютеру - возможность компьютеру
определить отсутствие или наличие новых байт в потоке. Контроллер буферизует и
приостанавливает поток байт в сторону компьютера в случае, если компьютер не
производит считывание своего потока (потока контроллер->компьютер).

Обмен данными происходит посредством пакетов, находящихся в потоке байт. Формат
пакета:

Содержимое поля     |  Длина поля, байт
--------------------+--------------------------
 длина полезной     |
 нагрузки N,        |       1
 N=0..255           |
--------------------+--------------------------
 номер канала,      |
 0..255             |       1
                    |
--------------------+--------------------------
                    |
 полезная нагрузка  |       N (0..255)
                    |
--------------------+--------------------------
 CRC16 ccitt всех   |
 предыдущих полей,  |       2
 big-endian         |
--------------------+--------------------------


Для открытия отдельного TCP-соединения необходимо открыть
канал связи с контроллером, в рамках которого будет происходить работа с
соединением.
Доступны каналы с номерами 00..EF, каналы F0-FF являются служебными и предназначены
для управления остальными каналами (открытие/закрытие, запрос статуса и т.д.) и
контроллером в целом. В настоящий момент используется только служебный канал FF.

Каждый канал подразумевает пакеты, направленные в обе стороны
(компьютер->контроллер и контроллер->компьютер), имеющие одинаковый номер
канала. В рамках одного канала происходит обмен неструктурированными (т.е.
границы пакетов не имеют смысла) потоками байт в обе стороны. Исключением
являются служебные каналы, где производится именно обмен сообщениями, имеющими
определённую длину и структуру.

Пакеты нулевой длины в пользовательских каналах имеют специальный смысл (об
этом ниже), в служебном канале такие пакеты игнорируются.

 2. Формат сообщений служебного (#FF) канала

Примечание: приводятся только сами сообщения, без "обёртки" (заголовка и CRC).
Сообщение составляет полезную нагрузку пакета.

Направление компьютер->контроллер:

Первый байт сообщения всегда определяет команду, посылаемую контроллеру.
Наличие последующих байт (аргументов) и их значение определяется командным
байтом.

Список команд:

#00 - команда запроса инициализации (о процедуре инициализации см. ниже).

#01 N - запрос статуса канала N (00..EF)

#02 N - открытие канала N (00..EF)

#03 N - закрытие канала N, аналогично #02

Внимание! команды #01, #02 и #03 с номерами каналов F0-FF игнорируются контроллером
и остаются без ответа.

#04 - запрос максимального числа открытых каналов, поддерживаемых контроллером.
Контроллер обязан поддерживать не менее 4 одновременно открытых каналов, без
привязки к конкретным номерам каналов.

#FF - команда подтверждения инициализации.


Направлене контроллер->компьютер:

Аналогично, первый байт определяет тип ответа или команду, наличие остальных
байт определяется первым.

Список команд:

#00 - команда запроса инициализации

#01 N X (3 байта) - статус канала N. Выдаётся в ответ на команды #01, #02, #03;
в случае закрытия канала по инициативе контроллера, а также при попытке
компьютера посылать данные в закрытый канал.

Формат байта X:

бит7 - ==1: канал открыт, ==0: канал закрыт. присутствует во всех статусных
сообщениях

бит6 - ==1: канал был успешно открыт или закрыт по инициативе компьютера.
Присутствует только в ответах на успешно выполненные команды #02 и #03. Если в
ответ на команду #02 приходит статус: бит7=0, бит6=0, бит1=0, то канал не может
быть открыт по каким-либо причинам на стороне контроллера.

бит5 - ==1: канал был закрыт по инициативе контроллера. Вместе с битом 7 ==0
присутствует в статусном сообщении, которое однократно посылается в случае
закрытия канала по инициативе контроллера.

бит1 - ==1: попытка открытия уже открытого или закрытия уже закрытого канала.
Присутствует только в ответах на ошибочные команды #02 и #03.

бит0 - ==1: попытка послать данные в закрытый канал. Вместе с битом 7 =0
является ответом на посылку данных в закрытый пользовательский канал.


#04 N - ответ на команду #04, N - максимальное число одновременно открытых
каналов, которое поддерживает контроллер. N=4..240.

#FF - команда подтверждения инициализации.


Каждый вновь открытый канал выглядит, как вновь открытое TCP-соединение с SOCKS-5
сервером без аутентификации (http://ru.wikipedia.org/wiki/SOCKS,
http://rfc2.ru/1928.rfc).

Пакет нулевой длины в открытом пользовательском канале равносилен вызову
shutdown [тут надо уточнить] стороной, пославшей пакет и означает, что больше
данных в данном направлении поступать не будет, но соединение остаётся открытым
в одностороннем режиме. Последующие попытки послать какие-либо данные в закрытом
направлении будут игнорироваться. Закрытие канала (по инициативе контроллера или
компьютера) равносильно вызванному close. При этом могут потеряться некоторые
посланные, но не достигшие адресата данные в TCP-соединении. После шатдаунов с
обоих сторон происходит закрытие канала по инициативе контроллера с
ысоответствующим статусным сообщением.



Процедура инициализации.

Инициализация происходит при первоначальном установлении связи компьютера с
контроллером, либо при получении ошибочного пакета (с неправильным CRC). В
первом случае инициализация проводится по инициативе компьютера, во втором - по
инициативе обнаружившего ошибочный пакет.

Инициализация проводится следующим образом:

1. заканчивается передача текущего пакета (если в момент начала инициализации
   какой-то пакет ещё передавался)

2. Отсылаются повторяющиеся команды запроса инициализации (пакет вместе с
   заголовком и CRC: #01 #FF #00 #F8 #53).

3. действие 2 проводится до момента получения в ответ команды запроса или
   подтверждения инициализации (пакета #01 #FF #00 #F8 #53 или пакета
   #01 #FF #FF #E6 #A3)

Последовательность повторяющихся пакетов #01 #FF #00 #F8 #53 или
#01 #FF #FF #E6 #A3 обладает свойством самосинхронизации, т.е. интерпретируя эту
последовательность с произвольного места и отбрасывая получающиеся пакеты с
неверной CRC, через некоторое время приёмник засинхронизируется и станет
принимать только верные указанные пакеты.

Во время самосинхронизации требуется отсылка нескольких повторяющихся пакетов с
целью пропуска каждого из неверно принимаемых пакетов.

4. Инициализация завершена.


После завершения инициализации все открытые на момент начала инициализации
каналы должны стать закрытыми как со стороны компьютера, так и со стороны
контроллера.


Компьютер должен быть в любой момент готов к процедуре
инициализации со стороны контроллера. Для этого, в случае получения пакета
#01 #FF #00 #F8 #53 компьютер входит в процедуру инициализации, сбрасывает
все открытые каналы и отвечает пакетом #01 #FF #FF #E6 #A3

В случае, если в момент процедуры инициализации произошёл сбой (одна из сторон
приняла неверный пакет), то дальнейшая инициализация продолнается одновременно
обоими сторонами, отсылающими пакеты запроса инициализации, до момента
самосинхронизации с обоих сторон.


